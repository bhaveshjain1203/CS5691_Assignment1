# -*- coding: utf-8 -*-
"""Q2P1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DAThTlqsgR4oUmxNYgAQ4iUeqoIshlZL
"""

#take the data
#random init for all data points
import numpy as np
import pandas as pd
import io
# get dataset from local 

from google.colab import files 
uploaded = files.upload()

# then convert it to numpy 2darray
with open('Dataset.csv') as csvfile:
      data =np.loadtxt(csvfile, delimiter=",")
#print(data)

#take an array of 1000
A = np.random.randint(4, size=(1000))

#function for error
def errorcalculate():
  errsum=0
  mean=meanfunction(data,A)
  for i in range (1000):
    errsum+=np.linalg.norm(data[i]-mean[A[i]])**2
  return errsum

def meanfunction(data,A):
  #return centroid
  centroids=[]
  for i in range (4):
    count=0
    sum=0
    for j in range (1000):
      if(A[j]==i) :
        sum=sum+data[j]
        count+=1
      #mean=data.mean(axis=0)
    centroids.append(sum/count)
  return centroids

#re-initialization if applicable 
def reinit(A):
  flag=0
  mean=meanfunction(data,A)
  for i in range (1000):
    min=np.linalg.norm(data[i]-mean[A[i]])**2
    cluster=A[i]
    for j in range(4):
      dist=(np.linalg.norm(data[i]- mean[j]))**2
      if (dist<min):
        min=dist
        
        flag=1
        cluster=j
    A[i]=cluster
  return flag

#draw before changes
import matplotlib.pyplot as plt
plt.xlabel("Dimension 1")
plt.ylabel("Dimension 2")
plt.title(" Data")
for i in range(1000):
  if (A[i]==0):
    plt.scatter(data[i][0],data[i][1],color = 'red')
  if (A[i]==1):
    plt.scatter(data[i][0],data[i][1],color = 'blue')
  if (A[i]==2):
    plt.scatter(data[i][0],data[i][1],color = 'green')
  if (A[i]==3):
    plt.scatter(data[i][0],data[i][1],color = 'yellow')

plt.show()

#driver function

err=[]
flag=1
while(True):
  flag=reinit(A)
  err.append(errorcalculate())
  if(flag==0):
    break

#draw after changes
import matplotlib.pyplot as plt
plt.xlabel("Dimension 1")
plt.ylabel("Dimension 2")
plt.title("K Means")
for i in range(1000):
  if (A[i]==0):
    plt.scatter(data[i][0],data[i][1],color = 'red')
  if (A[i]==1):
    plt.scatter(data[i][0],data[i][1],color = 'blue')
  if (A[i]==2):
    plt.scatter(data[i][0],data[i][1],color = 'green')
  if (A[i]==3):
    plt.scatter(data[i][0],data[i][1],color = 'yellow')

plt.show()

#print(err)
y=len(err)
z=[]
plt.xlabel("Iteration number")
plt.ylabel("Error Value")
plt.title("Error Function Vs Iteration")
for i in range(y):
  z.append(i)
plt.plot(z,err,'-ok')
plt.show()

