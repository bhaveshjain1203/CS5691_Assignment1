# -*- coding: utf-8 -*-
"""firstoparti.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17OCjAMej1oZ0e5UAgiirpSQ6xlb7426O
"""

#upload the file
import numpy as np
import pandas as pd
import io
from google.colab import files 
uploaded = files.upload()

# then convert data from the file to 2d array
with open('Dataset.csv') as csvfile:
      data =np.loadtxt(csvfile, delimiter=",")
#print(data)

# take mean 
import matplotlib.pyplot as plt

plt.figure(1)
plt.scatter(data[:,0],data[:,1])
plt.xlabel("Dimension 1")
plt.ylabel("Dimension 2")
plt.title("Original Data")
plt.show()

# calculate the centred data pts from mean
CenteredData = data - data.mean(axis=0)
#print(X_new)
plt.figure(2)
plt.scatter(CenteredData[:,0],CenteredData[:,1])
plt.xlabel("Dimension 1")
plt.ylabel("Dimension 2")
plt.title("Centred Data")
plt.show()

# caclucalte the covariance matrix 
covmatrix = np.dot(CenteredData.T,CenteredData)/1000
print("covariance matrix :")
for z in covmatrix:
   print(z)

# find the eigen value and vector use inbuilt lib for this 
w, v = np.linalg.eig(covmatrix)
idx = w.argsort()[::-1]   
w = w[idx]
v = v[:,idx]
print('E-value:', w)
print('E-vector', v)

# project the data to the eigen vector
# centred data matrix dot eigen vector

plt.plot([1,2],w,'-ro')
plt.xlabel("Variance")
plt.ylabel("PrincipalComponents")
plt.show()
row,column=v.shape
sumofeigenvalues=w[0]+w[1]
for i in range(row):
  variance=w[i]/sumofeigenvalues
  print("Variance",i+1,"(along Principal Component ",i+1,")","=",variance*100,"%")

resultnew = np.dot(CenteredData,v)
plt.axline((0,0),(-0.323516, -0.9462227),color = "red",label = 'w1')
plt.axline((0,0),(-0.9462227, 0.323516),color = "black",label = 'w2')
plt.legend(bbox_to_anchor = (1.05, 0.6))
for i in v:
  plt.scatter(resultnew[:,1],resultnew[:,0],zorder=1)
plt.xlabel("PrincipalComponent 1")
plt.ylabel("PrincipalComponent 2")
plt.title("Principal Component Analysis")
plt.show()